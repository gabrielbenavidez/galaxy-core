<?xml version="1.0" ?>
<tool id="qiime_longitudinal_feature-volatility" name="qiime longitudinal feature-volatility" version="2019.7">
	<description>Feature volatility analysis</description>
	<requirements>
		<container type="docker">qiime2/core</container>
	</requirements>
	<command><![CDATA[
qiime longitudinal feature-volatility

--i-table=$itable


--p-state-column="$pstatecolumn"

#if str($pindividualidcolumn):
 --p-individual-id-column="$pindividualidcolumn"
#end if

#if str($pcv):
 --p-cv=$pcv
#end if

#if str($prandomstate):
 --p-random-state="$prandomstate"
#end if

#set $pnjobs = '${GALAXY_SLOTS:-4}'

#if str($pnjobs):
 --p-n-jobs="$pnjobs"
#end if


#if str($pnestimators):
 --p-n-estimators=$pnestimators
#end if

#if str($pestimator) != 'None':
 --p-estimator=$pestimator
#end if

#if $pparametertuning:
 --p-parameter-tuning
#end if

#if str($pmissingsamples) != 'None':
 --p-missing-samples=$pmissingsamples
#end if


#if $input_files_mmetadatafile:
#def list_dict_to_string(list_dict):
	#set $file_list = list_dict[0]['additional_input'].__getattr__('file_name')
	#for d in list_dict[1:]:
		#set $file_list = $file_list + ' --m-metadata-file=' + d['additional_input'].__getattr__('file_name')
	#end for
	#return $file_list
#end def
 --m-metadata-file=$list_dict_to_string($input_files_mmetadatafile)
#end if


--o-filtered-table=ofilteredtable
--o-feature-importance=ofeatureimportance
--o-volatility-plot=ovolatilityplot
--o-accuracy-results=oaccuracyresults
--o-sample-estimator=osampleestimator
;
cp ofilteredtable.qza $ofilteredtable;
cp ofeatureimportance.qza $ofeatureimportance;
qiime tools export --input-path ovolatilityplot.qzv --output-path out   && mkdir -p '$ovolatilityplot.files_path'
&& cp -r out/* '$ovolatilityplot.files_path'
&& mv '$ovolatilityplot.files_path/index.html' '$ovolatilityplot';
qiime tools export --input-path oaccuracyresults.qzv --output-path out   && mkdir -p '$oaccuracyresults.files_path'
&& cp -r out/* '$oaccuracyresults.files_path'
&& mv '$oaccuracyresults.files_path/index.html' '$oaccuracyresults';
cp osampleestimator.qza $osampleestimator
	]]></command>
	<inputs>
		<param format="qza,no_unzip.zip" label="--i-table: ARTIFACT FeatureTable[Frequency] Feature table containing all features that should be used for target prediction.                [required]" name="itable" optional="False" type="data"/>
		<param label="--p-state-column: TEXT  Metadata containing collection time (state) values for each sample. Must contain exclusively numeric values.                                    [required]" name="pstatecolumn" optional="False" type="text"/>
		<param label="--p-individual-id-column: TEXT Metadata column containing IDs for individual subjects.                                  [optional]" name="pindividualidcolumn" optional="True" type="text"/>
		<param label="--p-cv: INTEGER         Number of k-fold cross-validations to perform. Range(1, None)                                                [default: 5]" name="pcv" optional="True" type="integer" min="1" value="5"/>
		<param label="--p-random-state: INTEGER Seed used by random number generator.      [optional]" name="prandomstate" optional="True" type="integer"/>
		<param label="--p-n-estimators: INTEGER Range(1, None)       Number of trees to grow for estimation. More trees will improve predictive accuracy up to a threshold level, but will also increase time and memory requirements. This parameter only affects ensemble estimators, such as Random Forest, AdaBoost, ExtraTrees, and GradientBoosting.      [default: 100]" name="pnestimators" optional="True" type="integer" min="1" value="100"/>
		<param label="--p-estimator: " name="pestimator" optional="True" type="select">
			<option selected="True" value="None">Selection is Optional</option>
			<option value="RandomForestRegressor">RandomForestRegressor</option>
			<option value="ExtraTreesRegressor">ExtraTreesRegressor</option>
			<option value="GradientBoostingRegressor">GradientBoostingRegressor</option>
			<option value="AdaBoostRegressor">AdaBoostRegressor</option>
			<option value="ElasticNet">ElasticNet</option>
			<option value="Ridge">Ridge</option>
			<option value="Lasso">Lasso</option>
			<option value="KNeighborsRegressor">KNeighborsRegressor</option>
			<option value="LinearSVR">LinearSVR</option>
			<option value="SVR">SVR</option>
		</param>
		<param label="--p-parameter-tuning: --p-no-parameter-tuning Automatically tune hyperparameters using random grid search.                              [default: False]" name="pparametertuning" selected="False" type="boolean"/>
		<param label="--p-missing-samples: " name="pmissingsamples" optional="True" type="select">
			<option selected="True" value="None">Selection is Optional</option>
			<option value="error">error</option>
			<option value="ignore">ignore</option>
		</param>

		<repeat name="input_files_mmetadatafile" optional="True" title="--m-metadata-file  [required]">
			<param label="--m-metadata-file: Metadata file or artifact viewable as metadata. This option may be supplied multiple times to merge metadata. [optional]" name="additional_input" type="data" format="tabular,qza,no_unzip.zip" />
		</repeat>

	</inputs>
	<outputs>
		<data format="qza" label="${tool.name} on ${on_string}: filteredtable.qza" name="ofilteredtable"/>
		<data format="qza" label="${tool.name} on ${on_string}: featureimportance.qza" name="ofeatureimportance"/>
		<data format="html" label="${tool.name} on ${on_string}: volatilityplot.qzv" name="ovolatilityplot"/>
		<data format="html" label="${tool.name} on ${on_string}: accuracyresults.qzv" name="oaccuracyresults"/>
		<data format="qza" label="${tool.name} on ${on_string}: sampleestimator.qza" name="osampleestimator"/>
	</outputs>
	<help><![CDATA[
Feature volatility analysis
###########################

Identify features that are predictive of a numeric metadata column,
state_column (e.g., time), and plot their relative frequencies across
states using interactive feature volatility plots. A supervised learning
regressor is used to identify important features and assess their ability
to predict sample states. state_column will typically be a measure of time,
but any numeric metadata column can be used.

Parameters
----------
table : FeatureTable[Frequency]
    Feature table containing all features that should be used for target
    prediction.
metadata : Metadata
    Sample metadata file containing individual_id_column.
state_column : Str
    Metadata containing collection time (state) values for each sample.
    Must contain exclusively numeric values.
individual_id_column : Str, optional
    Metadata column containing IDs for individual subjects.
cv : Int % Range(1, None), optional
    Number of k-fold cross-validations to perform.
random_state : Int, optional
    Seed used by random number generator.
n_estimators : Int % Range(1, None), optional
    Number of trees to grow for estimation. More trees will improve
    predictive accuracy up to a threshold level, but will also increase
    time and memory requirements. This parameter only affects ensemble
    estimators, such as Random Forest, AdaBoost, ExtraTrees, and
    GradientBoosting.
estimator : Str % Choices('RandomForestRegressor', 'ExtraTreesRegressor', 'GradientBoostingRegressor', 'AdaBoostRegressor', 'ElasticNet', 'Ridge', 'Lasso', 'KNeighborsRegressor', 'LinearSVR', 'SVR'), optional
    Estimator method to use for sample prediction.
parameter_tuning : Bool, optional
    Automatically tune hyperparameters using random grid search.
missing_samples : Str % Choices('error', 'ignore'), optional
    How to handle missing samples in metadata. "error" will fail if missing
    samples are detected. "ignore" will cause the feature table and
    metadata to be filtered, so that only samples found in both files are
    retained.

Returns
-------
filtered_table : FeatureTable[RelativeFrequency]
    Feature table containing only important features.
feature_importance : FeatureData[Importance]
    Importance of each input feature to model accuracy.
volatility_plot : Visualization
    Interactive volatility plot visualization.
accuracy_results : Visualization
    Accuracy results visualization.
sample_estimator : SampleEstimator[Regressor]
    Trained sample regressor.
	]]></help>
<macros>
    <import>qiime_citation.xml</import>
</macros>
<expand macro="qiime_citation"/>
</tool>
