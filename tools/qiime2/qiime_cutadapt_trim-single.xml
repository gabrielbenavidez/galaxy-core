<?xml version="1.0" ?>
<tool id="qiime_cutadapt_trim-single" name="qiime cutadapt trim-single" version="2019.7">
	<description> - Find and remove adapters in demultiplexed single-end sequences.</description>
	<requirements>
		<container type="docker">qiime2/core</container>
	</requirements>
	<command><![CDATA[
qiime cutadapt trim-single
--i-demultiplexed-sequences=$idemultiplexedsequences

#set $pcores = '${GALAXY_SLOTS:-4}'
#if str($pcores):
--p-cores=$pcores
#end if


#if '__sq__' in str($padapter):
  #set $padapter_temp = $padapter.replace('__sq__', "'")
  #set $padapter = $padapter_temp
#end if

#if 'X' in str($padapter):
  #set $padapter_temp = $padapter.replace('X', "$")
  #set $padapter = $padapter_temp
#end if

#if str($padapter):
 --p-adapter="$padapter"
#end if





#if '__sq__' in str($pfront):
  #set $pfront_temp = $pfront.replace('__sq__', "'")
  #set $pfront = $pfront_temp
#end if

#if str($pfront):
 --p-front="$pfront"
#end if





#if '__sq__' in str($panywhere):
  #set $panywhere_temp = $panywhere.replace('__sq__', "'")
  #set $panywhere = $panywhere_temp
#end if

#if str($panywhere):
 --p-anywhere="$panywhere"
#end if




#if str($perrorrate):
 --p-error-rate=$perrorrate
#end if

#if $pnoindels:
 --p-no-indels
#end if

#if str($ptimes):
 --p-times=$ptimes
#end if

#if str($poverlap):
 --p-overlap=$poverlap
#end if

#if $pmatchreadwildcards:
 --p-match-read-wildcards
#end if

#if $pnomatchadapterwildcards:
 --p-no-match-adapter-wildcards
#end if

#if str($pminimumlength):
 --p-minimum-length=$pminimumlength
#end if

#if $pdiscarduntrimmed:
 --p-discard-untrimmed
#end if

--o-trimmed-sequences=otrimmedsequences

;
cp otrimmedsequences.qza $otrimmedsequences
	]]></command>
	<inputs>
		<param format="qza,no_unzip.zip" label="--i-demultiplexed-sequences: ARTIFACT SampleData[SequencesWithQuality] The single-end sequences to be trimmed.     [required]" name="idemultiplexedsequences" optional="False" type="data"/>
		<param label="--p-adapter: TEXT...   Sequence of an adapter ligated to the 3' end. The List[Str]           adapter and any subsequent bases are trimmed. If a `$` is appended, the adapter is only found if it is at the end of the read. If your sequence of interest is 'framed' by a 5' and a 3' adapter, use this parameter to define a 'linked' primer - see https://cutadapt.readthedocs.io for complete details. [optional]" name="padapter" optional="True" type="text"/>
		<param label="--p-front: TEXT...     Sequence of an adapter ligated to the 5' end. The List[Str]           adapter and any preceding bases are trimmed. Partial matches at the 5' end are allowed. If a `^` character is prepended, the adapter is only found if it is at the beginning of the read.                  [optional]" name="pfront" optional="True" type="text"/>
		<param label="--p-anywhere: TEXT...  Sequence of an adapter that may be ligated to the 5' List[Str]           or 3' end. Both types of matches as described under `adapter` and `front` are allowed. If the first base of the read is part of the match, the behavior is as with `front`, otherwise as with `adapter`. This option is mostly for rescuing failed library preparations - do not use if you know which end your adapter was ligated to.                                 [optional]" name="panywhere" optional="True" type="text"/>

		<param label="--p-error-rate: PROPORTION Range(0, 1, inclusive_end=True) Maximum allowed error rate.             [default: 0.1]" name="perrorrate" optional="True" type="float" min="0" max="1" exclude_max="False" value="0.1"/>
		<param label="--p-no-indels: Do not allow insertions or deletions of bases when matching adapters.                              [default: False]" name="pnoindels" selected="False" type="boolean"/>
		<param label="--p-times: INTEGER     Remove multiple occurrences of an adapter if it is Range(1, None)      repeated, up to `times` times.            [default: 1]" name="ptimes" optional="True" type="integer" min="1" value="1"/>
		<param label="--p-overlap: INTEGER   Require at least `overlap` bases of overlap between Range(1, None)      read and adapter for an adapter to be found. [default: 3]" name="poverlap" optional="True" type="integer" min="1" value="3"/>
		<param label="--p-match-read-wildcards: --p-no-match-read-wildcards Interpret IUPAC wildcards (e.g., N) in reads. [default: False]" name="pmatchreadwildcards" selected="False" type="boolean"/>
		<param label="--p-no-match-adapter-wildcards: Do not interpret IUPAC wildcards (e.g., N) in adapters. [default: False]" name="pnomatchadapterwildcards" selected="False" type="boolean"/>
		<param label="--p-minimum-length: INTEGER Range(1, None)      Discard reads shorter than specified value. Note, the cutadapt default of 0 has been overridden, because that value produces empty sequence records. [default: 1]" name="pminimumlength" optional="True" type="integer" min="1" value="1"/>
		<param label="--p-discard-untrimmed: --p-no-discard-untrimmed Discard reads in which no adapter was found. [default: False]" name="pdiscarduntrimmed" selected="False" type="boolean"/>
	</inputs>
	<outputs>
		<data format="qza" label="${tool.name} on ${on_string}: trimmedsequences.qza" name="otrimmedsequences"/>
	</outputs>
	<help><![CDATA[
Find and remove adapters in demultiplexed single-end sequences.
###############################################################

Search demultiplexed single-end sequences for adapters and remove them. The
parameter descriptions in this method are adapted from the official
cutadapt docs - please see those docs at https://cutadapt.readthedocs.io
for complete details.

Parameters
----------
demultiplexed_sequences : SampleData[SequencesWithQuality]
    The single-end sequences to be trimmed.
adapter : List[Str], optional
    Sequence of an adapter ligated to the 3' end. The adapter and any
    subsequent bases are trimmed. If a `$` is appended, the adapter is only
    found if it is at the end of the read. If your sequence of interest is
    "framed" by a 5' and a 3' adapter, use this parameter to define a
    "linked" primer - see https://cutadapt.readthedocs.io for complete
    details.
front : List[Str], optional
    Sequence of an adapter ligated to the 5' end. The adapter and any
    preceding bases are trimmed. Partial matches at the 5' end are allowed.
    If a `^` character is prepended, the adapter is only found if it is at
    the beginning of the read.
anywhere : List[Str], optional
    Sequence of an adapter that may be ligated to the 5' or 3' end. Both
    types of matches as described under `adapter` and `front` are allowed.
    If the first base of the read is part of the match, the behavior is as
    with `front`, otherwise as with `adapter`. This option is mostly for
    rescuing failed library preparations - do not use if you know which end
    your adapter was ligated to.
error_rate : Float % Range(0, 1, inclusive_end=True), optional
    Maximum allowed error rate.
indels : Bool, optional
    Allow insertions or deletions of bases when matching adapters.
times : Int % Range(1, None), optional
    Remove multiple occurrences of an adapter if it is repeated, up to
    `times` times.
overlap : Int % Range(1, None), optional
    Require at least `overlap` bases of overlap between read and adapter
    for an adapter to be found.
match_read_wildcards : Bool, optional
    Interpret IUPAC wildcards (e.g., N) in reads.
match_adapter_wildcards : Bool, optional
    Interpret IUPAC wildcards (e.g., N) in adapters.
minimum_length : Int % Range(1, None), optional
    Discard reads shorter than specified value. Note, the cutadapt default
    of 0 has been overridden, because that value produces empty sequence
    records.
discard_untrimmed : Bool, optional
    Discard reads in which no adapter was found.

Returns
-------
trimmed_sequences : SampleData[SequencesWithQuality]
    The resulting trimmed sequences.
	]]></help>
<macros>
    <import>qiime_citation.xml</import>
</macros>
<expand macro="qiime_citation"/>
</tool>
