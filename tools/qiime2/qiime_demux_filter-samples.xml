<?xml version="1.0" ?>
<tool id="qiime_demux_filter-samples" name="qiime demux filter-samples" version="2019.7">
	<description> - Filter samples out of demultiplexed data.</description>
	<requirements>
		<container type="docker">qiime2/core</container>
	</requirements>
	<command><![CDATA[
qiime demux filter-samples 
    
--i-demux=$idemux


#if $input_files_mmetadatafile:
#def list_dict_to_string(list_dict):
  #set $file_list = list_dict[0]['additional_input'].__getattr__('file_name')
  #for d in list_dict[1:]:
	  #set $file_list = $file_list + ' --m-metadata-file=' + d['additional_input'].__getattr__('file_name')
  #end for
  #return $file_list
#end def
  --m-metadata-file=$list_dict_to_string($input_files_mmetadatafile)
#end if



#if '__sq__' in str($pwhere):
  #set $pwhere_temp = $pwhere.replace('__sq__', "'")
  #set $pwhere = $pwhere_temp
#end if


#if str($pwhere):
 --p-where="$pwhere"
#end if


#if $pexcludeids:
 --p-exclude-ids
#end if


--o-filtered-demux=ofiltereddemux

;
cp ofiltereddemux.qza $ofiltereddemux
	]]></command>
	<inputs>

		<repeat name="input_files_mmetadatafile" optional="False" title="--m-metadata-file">
			<param label="--m-metadata-file: Metadata file or artifact viewable as metadata. This option may be supplied multiple times to merge metadata. Sample metadata file containing individual_id_column.  [required]" name="additional_input" type="data" format="tabular,qza,no_unzip.zip" />
		</repeat>

		<param format="qza,no_unzip.zip" label="--i-demux: ARTIFACT SampleData[SequencesWithQuality¹ | PairedEndSequencesWithQuality² | JoinedSequencesWithQuality³] The demultiplexed data from which samples should be filtered.                                    [required]" name="idemux" optional="False" type="data"/>
		<param label="--p-where: TEXT       Optional SQLite WHERE clause specifying sample metadata criteria that must be met to be included in the filtered data. If not provided, all samples in `metadata` that are also in the demultiplexed data will be retained.                                 [optional]" name="pwhere" optional="True" type="text"/>
		<param label="--p-exclude-ids: --p-no-exclude-ids Defaults to False. If True, the samples selected by the `metadata` and optional `where` parameter will be excluded from the filtered data.       [default: False]" name="pexcludeids" selected="False" type="boolean"/>
	</inputs>
	<outputs>
		<data format="qza" label="${tool.name} on ${on_string}: filtereddemux.qza" name="ofiltereddemux"/>
	</outputs>
	<help><![CDATA[
Filter samples out of demultiplexed data.
#########################################

Filter samples indicated in given metadata out of demultiplexed data.
Specific samples can be further selected with the WHERE clause, and the
`exclude_ids` parameter allows for filtering of all samples not specified.

Parameters
----------
demux : SampleData[SequencesWithQuality¹ | PairedEndSequencesWithQuality² | JoinedSequencesWithQuality³]
    The demultiplexed data from which samples should be filtered.
metadata : Metadata
    Sample metadata indicating which sample ids to filter. The optional
    `where` parameter may be used to filter ids based on specified
    conditions in the metadata. The optional `exclude_ids` parameter may be
    used to exclude the ids specified in the metadata from the filter.
where : Str, optional
    Optional SQLite WHERE clause specifying sample metadata criteria that
    must be met to be included in the filtered data. If not provided, all
    samples in `metadata` that are also in the demultiplexed data will be
    retained.
exclude_ids : Bool, optional
    Defaults to False. If True, the samples selected by the `metadata` and
    optional `where` parameter will be excluded from the filtered data.

Returns
-------
filtered_demux : SampleData[SequencesWithQuality¹ | PairedEndSequencesWithQuality² | JoinedSequencesWithQuality³]
    Filtered demultiplexed data.
	]]></help>
<macros>
    <import>qiime_citation.xml</import>
</macros>
<expand macro="qiime_citation"/>
</tool>
